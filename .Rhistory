gd[r,c] = NA
score
}else{
NA
}
}
results$score = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "B")))
results$enemy = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "A")))
if(any(na.omit(results$score == 3))){
move = results[which(results$score == 3)[1], ]
return(move)
}
if(sum(results$enemy == 3,na.rm = T) > 0){
results = results[which(results$enemy == 3),]
}
move <- results[sample(which(results$score == max(results$score,na.rm = T)),1),]
move
}
#' console_board
#' @param gb game data
#' @param status message to user
console_board = function(gb, status){
cat("\014")
flush.console()
cat("\n")
gb[is.na(gb)] = " "
gb[gb == "A"] = "X"
gb[gb == "B"] = "O"
gb = c(gb[1,], gb[2, ], gb[3, ])
board <- ("\r
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
|     |
...................
%s")
console_board(game_data, paste0(user_input, "To select a move, right the row position, then the column position separated with a comma (e.g. '1,3')")
console_board(game_data, "To select a move, right the row position, then the column position separated with a comma (e.g. '1,3')")
#' xox
#'
#' Start a game of noughts and crosses
#' @export
xox = function(){
game_data <- matrix(ncol = 3, nrow = 3)
console_board(game_data, "Let's play!")
Sys.sleep(1)
winner = FALSE
while(!winner) {
console_board(game_data, "Your move: what will it be [row, column]?")
user_input <-
readline(prompt = "")
made_move = 0
while (made_move == 0) {
if(!valid_move(user_input)){
console_board(game_data, "To select a move, right the row position, then the column position separated with a comma (e.g. '1,3')")
}
if (!available(game_data, user_input)[1]) {
console_board(game_data, paste0(user_input, " is taken, try somewhere else [row, column]."))
user_input <-
readline(prompt = "")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row, col] = 'A'
console_board(game_data," ")
winner <- check_winner(game_data, player = "A", ai = FALSE)
if (sum(!is.na(game_data)) == 9) {
winner <- TRUE
message("DRAW!")
next
}
if(winner){
message("You win!!")
next
}
console_board(game_data, "AI moving")
Sys.sleep(1.5)
move = unlist(ai(game_data)[, 1:2])
game_data[move[1], move[2]] = "B"
console_board(game_data, "Your move")
winner <- check_winner(game_data, player = "B", ai = FALSE)
if(winner) console_board(game_data, ""); message("AI wins!")
}
}
#' available
#'
#' check to see if a desired move is possible
available = function(game_data,user_input){
is.na(eval(parse(text = glue::glue("game_data[{user_input}]"))))
}
#' check_winner
#'
#' function to derive whether a user has won the game, or to output current best score
check_winner = function(gd, player = "A", ai = TRUE) {
cols <- lapply(1:3, function(x) {
sum(gd[, x] == player, na.rm = T)
})
rows <- lapply(1:3, function(x) {
sum(gd[x, ] == player, na.rm = T)
})
diag1 <- sum(diag(gd) == player, na.rm = T)
diag2 = sum(c(gd[1, 3],
gd[2, 2],
gd[3, 1]) == player, na.rm = T)
if(ai){
return(max(unlist(c(cols,rows,diag1,diag2))))
}
if (any(c(cols, rows, diag1, diag2) == 3 )) {
return(TRUE)
}else{
return(FALSE)
}
}
#' ai
#'
#' function to define ai moves
#' @param gd game_data
ai = function(gd){
results <- data.frame(expand.grid(row = 1:3,col = 1:3))
check_score = function(gd, x, player) {
r = results[x, "row"]
c = results[x, "col"]
if (is.na(gd[r, c])) {
gd[r, c] = player
score <- check_winner(gd, player = player, ai = TRUE)
gd[r,c] = NA
score
}else{
NA
}
}
results$score = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "B")))
results$enemy = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "A")))
if(any(na.omit(results$score == 3))){
move = results[which(results$score == 3)[1], ]
return(move)
}
if(sum(results$enemy == 3,na.rm = T) > 0){
results = results[which(results$enemy == 3),]
}
move <- results[sample(which(results$score == max(results$score,na.rm = T)),1),]
move
}
#' console_board
#' @param gb game data
#' @param status message to user
console_board = function(gb, status){
cat("\014")
flush.console()
cat("\n")
gb[is.na(gb)] = " "
gb[gb == "A"] = "X"
gb[gb == "B"] = "O"
gb = c(gb[1,], gb[2, ], gb[3, ])
board <- ("\r
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
|     |
...................
%s")
cat(do.call(sprintf, c(fmt = board, append(as.list(gb), status))))
}
valid_move = function(user_input){
grepl("^[0-9]\\,[0-9]$",user_input)
}
console_board(game_data, "To select a move, right the row position, then the column position separated with a comma (e.g. '1,3')")
game_data <- matrix(ncol = 3, nrow = 3)
console_board(game_data, "Let's play!")
Sys.sleep(1)
console_board(game_data, "To select a move, right the row position, then the column position separated with a comma (e.g. '1,3')")
console_board(game_data, "Oops try again, write the row then the column separated with a comma (e.g. '1,3')")
console_board(game_data, "Write the row then the column separated with a comma (e.g. '1,3')")
console_board(game_data, "Oops: Row then the column separated with a comma (e.g. '1,3')")
console_board(game_data, "Try again. Row then the column separated with a comma (e.g. '1,3')")
library(xox)
xox()
user_input
_
grepl("^[1-3]\\,[1-3]$",user_input)
game_data <- matrix(ncol = 3, nrow = 3)
console_board(game_data, "Let's play!")
Sys.sleep(1)
winner = FALSE
while(!winner) {
console_board(game_data, "Your move: what will it be [row, column]?")
user_input <-
readline(prompt = "")
made_move = 0
while (made_move == 0) {
if(!valid_move(user_input)){
console_board(game_data, "Try again. Row then the column separated with a comma (e.g. '1,3')")
}
if (!available(game_data, user_input)[1]) {
console_board(game_data, paste0(user_input, " is taken, try somewhere else [row, column]."))
user_input <-
readline(prompt = "")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row, col] = 'A'
console_board(game_data," ")
winner <- check_winner(game_data, player = "A", ai = FALSE)
if (sum(!is.na(game_data)) == 9) {
winner <- TRUE
message("DRAW!")
next
}
if(winner){
message("You win!!")
next
}
console_board(game_data, "AI moving")
Sys.sleep(1.5)
move = unlist(ai(game_data)[, 1:2])
game_data[move[1], move[2]] = "B"
console_board(game_data, "Your move")
winner <- check_winner(game_data, player = "B", ai = FALSE)
if(winner) console_board(game_data, ""); message("AI wins!")
}
user_input = "1,4"
made_move = 0
library(xox)
xox()
game_data <- matrix(ncol = 3, nrow = 3)
console_board(game_data, "Let's play!")
Sys.sleep(1)
winner = FALSE
console_board(game_data, "Your move: what will it be [row, column]?")
user_input <-
readline(prompt = "")
while (made_move == 0) {
if(!valid_move(user_input)){
console_board(game_data, "Try again. Row then the column separated with a comma (e.g. '1,3')")
next
}
if (!available(game_data, user_input)[1]) {
console_board(game_data, paste0(user_input, " is taken, try somewhere else [row, column]."))
user_input <-
readline(prompt = "")
} else{
made_move = 1
}
}
made_move = 0
while (made_move == 0) {
if(!valid_move(user_input)){
console_board(game_data, "Try again. Row then the column separated with a comma (e.g. '1,3')")
next
}
if (!available(game_data, user_input)[1]) {
console_board(game_data, paste0(user_input, " is taken, try somewhere else [row, column]."))
user_input <-
readline(prompt = "")
} else{
made_move = 1
}
}
valid_move = function(user_input){
grepl("^[1-3]\\,[1-3]$",user_input)
}
!valid_move(user_input)
console_board(game_data, "Try again. Row then the column separated with a comma (e.g. '1,3')")
#' xox
#'
#' Start a game of noughts and crosses
#' @export
xox = function(){
game_data <- matrix(ncol = 3, nrow = 3)
console_board(game_data, "Let's play!")
Sys.sleep(1)
winner = FALSE
while(!winner) {
console_board(game_data, "Your move: what will it be [row, column]?")
user_input <-
readline(prompt = "")
made_move = 0
while (made_move == 0) {
if(!valid_move(user_input)){
console_board(game_data, "Try again. Row then the column separated with a comma (e.g. '1,3')")
next
}
if (!available(game_data, user_input)[1]) {
console_board(game_data, paste0(user_input, " is taken, try somewhere else [row, column]."))
user_input <-
readline(prompt = "")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row, col] = 'A'
console_board(game_data," ")
winner <- check_winner(game_data, player = "A", ai = FALSE)
if (sum(!is.na(game_data)) == 9) {
winner <- TRUE
message("DRAW!")
next
}
if(winner){
message("You win!!")
next
}
console_board(game_data, "AI moving")
Sys.sleep(1.5)
move = unlist(ai(game_data)[, 1:2])
game_data[move[1], move[2]] = "B"
console_board(game_data, "Your move")
winner <- check_winner(game_data, player = "B", ai = FALSE)
if(winner) console_board(game_data, ""); message("AI wins!")
}
}
#' available
#'
#' check to see if a desired move is possible
available = function(game_data,user_input){
is.na(eval(parse(text = glue::glue("game_data[{user_input}]"))))
}
#' check_winner
#'
#' function to derive whether a user has won the game, or to output current best score
check_winner = function(gd, player = "A", ai = TRUE) {
cols <- lapply(1:3, function(x) {
sum(gd[, x] == player, na.rm = T)
})
rows <- lapply(1:3, function(x) {
sum(gd[x, ] == player, na.rm = T)
})
diag1 <- sum(diag(gd) == player, na.rm = T)
diag2 = sum(c(gd[1, 3],
gd[2, 2],
gd[3, 1]) == player, na.rm = T)
if(ai){
return(max(unlist(c(cols,rows,diag1,diag2))))
}
if (any(c(cols, rows, diag1, diag2) == 3 )) {
return(TRUE)
}else{
return(FALSE)
}
}
#' ai
#'
#' function to define ai moves
#' @param gd game_data
ai = function(gd){
results <- data.frame(expand.grid(row = 1:3,col = 1:3))
check_score = function(gd, x, player) {
r = results[x, "row"]
c = results[x, "col"]
if (is.na(gd[r, c])) {
gd[r, c] = player
score <- check_winner(gd, player = player, ai = TRUE)
gd[r,c] = NA
score
}else{
NA
}
}
results$score = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "B")))
results$enemy = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "A")))
if(any(na.omit(results$score == 3))){
move = results[which(results$score == 3)[1], ]
return(move)
}
if(sum(results$enemy == 3,na.rm = T) > 0){
results = results[which(results$enemy == 3),]
}
move <- results[sample(which(results$score == max(results$score,na.rm = T)),1),]
move
}
#' console_board
#' @param gb game data
#' @param status message to user
console_board = function(gb, status){
cat("\014")
flush.console()
cat("\n")
gb[is.na(gb)] = " "
gb[gb == "A"] = "X"
gb[gb == "B"] = "O"
gb = c(gb[1,], gb[2, ], gb[3, ])
board <- ("\r
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
_____|_____|_____
|     |
%s  |  %s  |  %s
|     |
...................
%s")
cat(do.call(sprintf, c(fmt = board, append(as.list(gb), status))))
}
valid_move = function(user_input){
grepl("^[1-3]\\,[1-3]$",user_input)
}
game_data <- matrix(ncol = 3, nrow = 3)
console_board(game_data, "Let's play!")
Sys.sleep(1)
winner = FALSE
while(!winner) {
console_board(game_data, "Your move: what will it be [row, column]?")
user_input <-
readline(prompt = "")
made_move = 0
while (made_move == 0) {
if(!valid_move(user_input)){
console_board(game_data, "Try again. Row then the column separated with a comma (e.g. '1,3')")
next
}
if (!available(game_data, user_input)[1]) {
console_board(game_data, paste0(user_input, " is taken, try somewhere else [row, column]."))
user_input <-
readline(prompt = "")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row, col] = 'A'
console_board(game_data," ")
winner <- check_winner(game_data, player = "A", ai = FALSE)
if (sum(!is.na(game_data)) == 9) {
winner <- TRUE
message("DRAW!")
next
}
if(winner){
message("You win!!")
next
}
console_board(game_data, "AI moving")
Sys.sleep(1.5)
move = unlist(ai(game_data)[, 1:2])
game_data[move[1], move[2]] = "B"
console_board(game_data, "Your move")
winner <- check_winner(game_data, player = "B", ai = FALSE)
if(winner) console_board(game_data, ""); message("AI wins!")
}
library(xox)
xox
library(xox)
xox()
library(xox)
if(user_input == "exit") stop("game aborted", call. = FALSE)
stop("game aborted", call. = FALSE)
if(identical(user_input,"exit")) stop("game aborted", call. = FALSE)
user_input = "snexit"
if(identical(user_input,"exit")) stop("game aborted", call. = FALSE)
user_input = "exit"
if(identical(user_input,"exit")) stop("game aborted", call. = FALSE)
library(xox)
xox
xox()
library(xox)
xox()
xox()
library(xox)
eix
xox()
xox()
library(xox)
xox()
xox()
xox()
xox()
library(xox)
xox()
xox()
xox()
stop::update_git("add actual content")
stop::update_git("readme")
remotes::install_packages("conig/xox")
remotes::install_github("conig/xox")
stop::update_git("fix remotes code")
remotes::install_github("conig/xox")
xox()
library(xox)
xox()
xox()
xox()
xox()
xox()
stop::update_git("better readme")
stop::update_git("readme formatting")
library(xox)
stop::update_git("complete readme code")
